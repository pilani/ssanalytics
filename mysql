var mysql = require('mysql');
cfg = require('./config.js').config;
rb=require('./rb.js');
exports.writeToSSADb = writeToSSADb;
var mongoose = require('mongoose');
Schema = mongoose.Schema;
//console.log(mysql);
//require('http').createServer().listen('8080');
//giving unclosed connectnon error
db = mongoose.connect('mongodb://'+cfg["MONGO_URL"]);

/*var connection = mysql.createConnection({
  host     : 'ss-db-staging.csqxivzy0twu.ap-southeast-1.rds.amazonaws.com',
  user     : 'ss_master_user',
  password : 'BackupInstance456',
  database: 'sstru1',
});
console.log(connection);
connection.connect(function(err)
	{
		console.log(err);
		if(err)
		{
		console.log('Error creating connection');
		}
		else
		{
			console.log('connection established');
		}

	});

currdate = new Date();
var gds = connection.query('SELECT SUM(a.bookedSeats) AS bs,a.source,b.rbMasterId as rbSource,c.destination,d.rbMasterId as rbDestination, LOCALTIME() as lastupdated FROM gds_routesdata a JOIN  sslocation_region b JOIN gds_routesdata c JOIN  sslocation_region d ON (a.source = b.id AND c.destination = d.id AND a.id = c.id) GROUP BY a.source,c.destination ORDER BY bs DESC LIMIT 10', function(err, rows){
	console.log(err);
		if(err)
		{
		console.log('Error getting records');
		}
		else
		{
			//console.log(rows);
			writeToSSADb(rows)
			connection.destroy();
			console.log('connection ended');
		}
});*/

		

/*var gdsschema =  new Schema({
    name: String
});
console.log(gdsschema);


mongoose.connect('mongodb://'+cfg["MONGO_URL"],function(err){
	if(err){
		console.log(" Error occured.......");
	}
	else{

        mongoose.model('gdsOperators',gdsschema);
        var gdsop = mongoose.model('gdsOperators');
		console.log("Schema is created...");
	}
});*/

function writeToSSADb(gds,callback)
{


var schema = mongoose.Schema({ rbSource: 'string' , rbDestination: 'string' });
var Event = mongoose.model('gdsoperators', schema);

console.log("Records" + gds);






//Useful when creating a new collection -- check with Pradeep
/*var event1= new Event({ boaccount: '57823746' });
event1.save(function (err) {
  if (err) // ...
  console.log('meow');*/

//Event.collection.insert(gds,{},function(err){

	//Added here just to check upsert
	//rb.get(122,124,'23-May-2013',callback)
	console.log("gds.length" + gds.length);
	for(var i = gds.length-1; i >= 0; i-- )
	{
	//console.log("Row %j", gds[i])
	console.log(" gds"+gds[i].rbSource + gds[i].rbDestination );
	//var date = new Date();
	rb.get(gds[i].rbSource,gds[i].rbDestination,'05-June-2013',callback)

	Event.collection.update({rbSource:gds[i].rbSource,rbDestination:gds[i].rbDestination},gds[i],{upsert: true},function(err){
    
   		if(err){
   			//console.log(event1);
    	console.log(" error in flushing to mongo "+err);
    	callback(err);
   		}

   		else{   
   		 //callback();	
   		//console.log(" successfully flushed to mongo:"+gds[i]);	
   		//	console.log(" successfully flushed to mongo:"+row.rbSource+ row.rbSource);
		//rb.get(row.rbSource,row.rbDestination,'24-May-2013',callback)

   		/*	console.log(" successfully flushed to mongo:"+gds[i]);
   			var query = Event.find({});
   			console.log("Query: %j",query);
   			query.select('rbSource rbDestination');
   			var source = query.exec(function(err,rows)
   			{
   				if(err)
   				{
   					console.log(" error getting record "+err);
    				return callback();
   				}
   				else
   				{
   						//console.log(" record count",rows.length);
   						rb.get(gds[i].rbSource,gds[i].rbDestination,'24-May-2013',callback)
   					
   					
   					//mongoose.connection.close();

   				}


   			});*/

   			//console.log("56884488 rows"+query.toJSON());
   				/*Event.find({},'source destination',function(err,rows)
   					{
   						if(err)
   						{
   							console.log("Unable to retrieve the records"+err);
   							return callback();
   						}
   						else
   						{
   							console.log("retrieve the records"+rows);
   							for (var i = rows.length - 1; i >= 0; i--) {
   							 	//rb.get(rows[i].fields());
   							 	console.log("Rows" +rows[i].fields());
   							 }
   						}
   					});*/
   			
  
   		 }

   			
 		});
}


}


   							





/*
mongoose.connect('mongodb://'+cfg["MONGO_URL"],function(err){
    if(err){
        console.log("error in connecting to mongo"+err.stack)
        
    }else 
    { 
    	console.log (" connection to mongo succesfull")
		var gdsop = mongoose.model('gdsOperators');
		gdsop.collection.insert(gdsoperators,{},function(err){
    
   		if(err){
    	console.log(" error in flushing to mongo "+err);
   		}else{ 
   			console.log(" successfully flished to mongo:"+gdsoperators)
   		 };
   			callback();
 		});
	 };
}); */


function callback()
{
	//mongoose.connection.close();
	console.log("Done");
}




